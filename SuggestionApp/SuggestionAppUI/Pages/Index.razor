@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>Training Suggestions</h1>
<div>
    <button>Suggest</button>
</div>

<div>
    <div>
        <!-- If there are suggestions, it will return the count. -->
        @suggestions?.Count Suggestions
    </div>
    <div>
        <!-- Buttons for ordering the suggestions -->
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div>
        <!-- Search Box -->
        <!-- When there is an input, it will take the entire value as input to the OnSearchInput -->
        <!-- Will call the method everytime a letter is hit -->
        <input type="text" placeholder="Search" 
            aria-label="Search Box" @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>


@code {
    // Data Points
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    // Filter Settings
    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    // On inialization method, loading data
    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
    }

    // Calling the methods to load the suggestions
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Will render the first time
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    // Loads the filter state
    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        // Either going to be the value of what's in the cache, or it will be All
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        // Either going to be the value of what's in the cache, or it will be All
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        // Either going to be the value of what's in the cache, or it will be All
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        // Either going to be the value of what's in the cache, or it will be All
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    // Saves the Filter selections
    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        // Page will only show approved suggestions
        var output = await suggestionData.GetAllApprovedSuggestions();

        if (selectedCategory != "All")
        {
            // Will filter the category name if it has one
            output = output.Where(S => S.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        // If there is text in the search text, search algorithm
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            // Sorts by new
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        } else
        {
            // Sorts by Vote Counts > Date Created
            output = output.OrderByDescending(s => s.UserVotes.Count)
                .ThenByDescending(s => s.DateCreated).ToList();
        }

        // Filling suggestion list with filtered set
        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            return "Click To";
        }
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        } 
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}